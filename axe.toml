# =============================================================================
# AXE Configuration File
#   Following subsections are available
#   APP
#   LOGGER - output setting
#   IO - base directory for IO
#   LSM - Log structured merge tree assumptions and settings
#   JOB - all job specific settings
#   LCM - Learned cost model specifics
#   LTune - Learned tuner specifics
#   SCHEDULERS - ML learning rate schduler kwargs
#   OPTIMIZERS - ML optimizer kwargs
#   LOSS - ML Loss function kwargs
# =============================================================================

# =============================================================================
# HEADER APP
#   Logic of app including jobs list to run
# =============================================================================
[app]
name = "AXE"
run = [
    # "create_lcm_data",
    # "train_lcm",
    # "create_ltuner_data",
    # "train_ltuner"
    "run_experiments",
]
random_seed = 2169
disable_tqdm = false

# =============================================================================
# HEADER LOGGER
#   Generic IO settings for experiments, saving data, etc
# =============================================================================
[log]
format = "[%(levelname)s][%(asctime)-15s][%(filename)s] %(message)s"
datefmt = '%d-%m-%y:%H:%M:%S'
level = "DEBUG"

# =============================================================================
# HEADER IO
#   Generic IO settings for experiments, saving data, etc
# =============================================================================
[io]
data_dir = "data"
database = "axe_results.db"

# =============================================================================
# HEADER LSM
#   Generic LSM settings
# =============================================================================
[lsm]
# Policy will effect everything else down stream (e.g. choice of neural network
# architecture for learned cost model)
#   Tiering
#   Leveling
#   Classic - Considers both leveing and tiering
#   QHybrid - Levels 1 -> L = Q
#   Fluid - Levels 1 -> (L-1) = Q, Level L = Z
#   Kapacity - Each level has own K_i decision
policy = 'Kapacity'

[lsm.bounds]
max_considered_levels = 20                  # Max number of levels to consider
size_ratio_range = [2, 22]                  # low, high of size ratios to consider
page_sizes = [4, 8, 16]                     # KB pages
entry_sizes = [1024, 2048, 4096, 8192]      # bits
memory_budget_range = [5, 20]               # low, high, bits per element
selectivity_range = [1e-7, 1e-9]            # low, high
elements_range = [10000000, 100000000]    # element range

# Default system values if not generating random systems
[lsm.system]
E = 1024           # size of a single entry in bits
s = 1.905581e-8    # range query selectivity, 1 implies the full key range per query
B = 64.0           # number of physical entries per page
N = 522365629      # total number of key-val pairs for LSM tree
H = 5.705814       # total memory budget in bits per element
phi = 1.0          # read/write asymmetry coefficient, 1 implies w/r cost the same

# Default workload if not generating from random distribution
[lsm.workload]
z0 = 0.063
z1 = 0.190
q = 0.545
w = 0.202

# =============================================================================
# HEADER JOB
#   Settings for each individual job (executable)
# =============================================================================
# --------------------------------------
[job] # Common settings across all jobs
# --------------------------------------
use_gpu_if_avail = true

# --------------------------------------
[job.create_lcm_data]
# --------------------------------------
output_dir = "data/lcm/train_data/kaplsm"
num_samples = 65536
num_files = 16
num_workers = 8
overwrite_if_exists = false

# --------------------------------------
[job.train_lcm]
# --------------------------------------
max_epochs = 100
save_dir = "data/lcm/models/kaplsm_250514_1230"
no_checkpoint = false

data_split = 0.9
data_dir = "data/lcm/train_data/kaplsm"
batch_size = 128
shuffle = true
num_workers = 4

# Different loss functions to train via
#   MSE - Mean squared error
#   NMSE - Normalized mean squared error
#   MSLE - Mean squared log error
#   RMSE - Root mean square error
#   RMSLE - Root mean squared log error
#   Huber - Huber loss
loss_fn = "MSE"

# Supported optimizers
#   [SGD, Adam, Adagrad, AdamW]
optimizer = "Adam"

# Learning rate schedulers
#   [CosineAnnealing, Exponential, Constant, None]
lr_scheduler = "CosineAnnealing"

# --------------------------------------
[job.create_ltuner_data]
# --------------------------------------
output_dir = "data/ltuner/train_data/std"
num_samples = 65536
num_files = 32
num_workers = 8
overwrite_if_exists = true

# --------------------------------------
[job.train_ltuner]
# --------------------------------------
max_epochs = 100
save_dir = "data/ltuner/models/kaplsm_250514_1230"
# Learned cost model is our loss, input full path to checkpoint or model file
loss_fn_path = "data/lcm/models/kaplsm_250514_1230"
optimizer = "AdamW"
lr_scheduler = "CosineAnnealing"
no_checkpoint = false

data_split = 0.9
data_dir = "data/ltuner/train_data/std"
batch_size = 1024
shuffle = true
num_workers = 4

# -----------------------------------------------------------------------------
[job.run_experiments]
# -----------------------------------------------------------------------------
exp_list = [
    "ExperimentMLOS"
]

# =============================================================================
# HEADER LCM
#   Add configurations related to learned cost models
# =============================================================================

# -----------------------------------------------------------------------------
# HEADER LCM.MODELS
#   Configuration for specific models
# -----------------------------------------------------------------------------
[lcm.model]
embedding_size = 8
hidden_length = 3
hidden_width = 64
decision_dim = 64
dropout = 0.0           # dropout percentage
norm_layer = "Batch"    # "Batch" or "Layer" norm

# Used only for classic models, generally smaller than embedding size
policy_embedding_size = 4

# =============================================================================
# HEADER LTUNE
#   Learned tuner module
# =============================================================================
[ltuner]
penalty_factor = 10

# kwargs specific to LTune models during forward pass
[ltuner.train_kwargs]
temp = 2
hard = false

[ltuner.validate_kwargs]
temp = 1
hard = true

# -----------------------------------------------------------------------------
# HEADER LTUNER.MODEL
#   Model configurations
# -----------------------------------------------------------------------------
[ltuner.model]
hidden_length = 4
hidden_width = 64
dropout = 0.1                     # dropout percentage
norm_layer = "Batch"            # batch or layer norm
categorical_mode = "gumbel"    # reinmax or gumbel

# =============================================================================
# HEADER SCHEDULERS
#   Specific settings for any learning rate schedulers
# =============================================================================
[scheduler.CosineAnnealingLR]
T_max = 10
eta_min = 0.0001  # minimum learning rate

[scheduler.Exponential]
gamma = 0.9

# =============================================================================
# HEADER OPTIMIZERS
#   Settings for any optimizers
# =============================================================================
[optimizer.Adam]
lr = 0.0001

[optimizer.AdamW]
lr = 0.001

[optimizer.SGD]
lr = 0.001

[optimizer.Adagrad]
lr = 0.001

# =============================================================================
# HEADER LOSS
#   Settings for individual loss functions
# =============================================================================
[loss.Huber]
reduction = 'sum'
delta = 10

[loss.MSE]
reduction = 'mean'
